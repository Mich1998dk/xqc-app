{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_DEVICE, SET_DEVICES, CLEAR_DEVICES, SET_SELECTED_DEVICE, SET_LOADING, SET_HISTORY } from \"./action-types\";\nimport { addDevice, setDevices, clearDevices, setSelectedDevice, setLoading, setHistory } from \"./actions\";\nimport { URL } from \"../utils/constants\";\nimport { setDevicesInAsyncStorage, getDevicesInAsyncStorage, clearStorage } from \"../utils/storage\";\nimport { filterEquals, deviceExists } from \"../utils/helpers\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar initialDevice = {\n  Imei: \"\",\n  Name: \"\",\n  Status: undefined\n};\nvar initialState = {\n  devices: [],\n  selectedDevice: initialDevice,\n  isConnectingDevice: false,\n  loading: false,\n  deviceHistory: undefined\n};\nexport var devicesReducer = function devicesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_DEVICE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          devices: [].concat(_toConsumableArray(state.devices), [action.payload])\n        });\n      }\n\n    case SET_DEVICES:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          devices: action.payload\n        });\n      }\n\n    case CLEAR_DEVICES:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          devices: action.payload\n        });\n      }\n\n    case SET_SELECTED_DEVICE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedDevice: action.payload\n        });\n      }\n\n    case SET_LOADING:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: action.payload\n        });\n      }\n\n    case SET_HISTORY:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          deviceHistory: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport var clearDevicesAsync = function clearDevicesAsync() {\n  return function _callee(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(clearDevices());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateDeviceInStorage = function updateDeviceInStorage(device) {\n  return function _callee2(dispatch, getState) {\n    var devicesFromStorage, tempArray, i;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(setLoading(true));\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getDevicesInAsyncStorage());\n\n          case 3:\n            devicesFromStorage = _context2.sent;\n\n            if (devicesFromStorage) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            tempArray = JSON.parse(devicesFromStorage);\n\n            for (i = 0; i < tempArray.length; i++) {\n              if (tempArray[i].Imei == device.Imei) {\n                tempArray[i].Name = device.Name;\n              }\n            }\n\n            setDevicesInAsyncStorage(tempArray);\n            dispatch(setLoading(false));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchDevices = function fetchDevices() {\n  return function _callee3(dispatch, getState) {\n    var devicesFromStorage, devicesJson, fetchedDevices, i, device, formatted;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch(setLoading(true));\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(getDevicesInAsyncStorage());\n\n          case 3:\n            devicesFromStorage = _context3.sent;\n\n            if (!(devicesFromStorage === null)) {\n              _context3.next = 7;\n              break;\n            }\n\n            Alert.alert(\"No storage\");\n            return _context3.abrupt(\"return\");\n\n          case 7:\n            devicesJson = JSON.parse(devicesFromStorage);\n            fetchedDevices = [];\n            i = 0;\n\n          case 10:\n            if (!(i < devicesJson.length)) {\n              _context3.next = 19;\n              break;\n            }\n\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(fetch(\"\" + URL + devicesJson[i].Imei).then(function (res) {\n              return res.json();\n            }));\n\n          case 13:\n            device = _context3.sent;\n            formatted = {\n              Name: devicesJson[i].Name,\n              Imei: devicesJson[i].Imei,\n              Status: device\n            };\n            fetchedDevices.push(formatted);\n\n          case 16:\n            i++;\n            _context3.next = 10;\n            break;\n\n          case 19:\n            dispatch(setLoading(false));\n            dispatch(setDevices(fetchedDevices));\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var setSelectedDeviceAsync = function setSelectedDeviceAsync(device) {\n  return function _callee4(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            dispatch(setSelectedDevice(device));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateSelectedDevice = function updateSelectedDevice() {\n  return function _callee5(dispatch, getState) {\n    var deviceFromState, device, formattedDevice;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (getState().selectedDevice.Imei === undefined) {\n              Alert.alert(\"Error\", \"No selected device!\");\n            }\n\n            deviceFromState = getState().selectedDevice;\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"\" + URL + deviceFromState.Imei).then(function (res) {\n              return res.json();\n            }).catch(function (err) {\n              console.log(\"ERROR: \" + err);\n            }));\n\n          case 4:\n            device = _context5.sent;\n            formattedDevice = {\n              Imei: deviceFromState.Imei,\n              Name: deviceFromState.Name,\n              Status: device\n            };\n            console.log(formattedDevice);\n            dispatch(setSelectedDevice(formattedDevice));\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addDeviceAsync = function addDeviceAsync(name, imei) {\n  return function _callee6(dispatch, getState) {\n    var devicesFromStorage, device, formattedDevices;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(getDevicesInAsyncStorage());\n\n          case 2:\n            devicesFromStorage = _context6.sent;\n            device = {\n              Name: name,\n              Imei: imei,\n              Status: undefined\n            };\n\n            if (devicesFromStorage) {\n              _context6.next = 8;\n              break;\n            }\n\n            setDevicesInAsyncStorage([device]);\n            _context6.next = 16;\n            break;\n\n          case 8:\n            if (!deviceExists(JSON.parse(devicesFromStorage), device.Imei)) {\n              _context6.next = 13;\n              break;\n            }\n\n            Alert.alert(\"ERROR\", \"Already has a device with that code!\");\n            return _context6.abrupt(\"return\");\n\n          case 13:\n            formattedDevices = JSON.parse(devicesFromStorage);\n            _context6.next = 16;\n            return _regeneratorRuntime.awrap(setDevicesInAsyncStorage(formattedDevices.concat([device])));\n\n          case 16:\n            dispatch(addDevice(device));\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var deleteDeviceAsync = function deleteDeviceAsync(imei) {\n  return function _callee7(dispatch, getState) {\n    var devicesFromStorage, filteredDevices;\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            dispatch(setLoading(true));\n            _context7.next = 3;\n            return _regeneratorRuntime.awrap(getDevicesInAsyncStorage());\n\n          case 3:\n            devicesFromStorage = _context7.sent;\n            filteredDevices = JSON.parse(devicesFromStorage).filter(function (device) {\n              return filterEquals(device, imei);\n            });\n            setDevicesInAsyncStorage(filteredDevices);\n            dispatch(setDevices(filteredDevices));\n            dispatch(setLoading(true));\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getDevicesFromStorage = function getDevicesFromStorage() {\n  return function _callee8(dispatch, getState) {\n    var devicesFromStorage;\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return _regeneratorRuntime.awrap(getDevicesInAsyncStorage());\n\n          case 2:\n            devicesFromStorage = _context8.sent;\n            console.log(devicesFromStorage);\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var clearStorageAsync = function clearStorageAsync() {\n  return function _callee9(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            clearStorage();\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchHistory = function fetchHistory() {\n  return function _callee10(dispatch, getState) {\n    var device, body, result, i;\n    return _regeneratorRuntime.async(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            dispatch(setLoading(true));\n            device = getState().selectedDevice;\n            body = JSON.stringify({\n              start: \"2021-01-30T18:11:01.674Z\"\n            });\n            _context10.next = 5;\n            return _regeneratorRuntime.awrap(fetch(URL + \"history/\" + device.Imei, {\n              method: \"POST\",\n              body: body,\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 5:\n            result = _context10.sent;\n\n            for (i = 0; i < result.history.length; i++) {\n              result.history[i].events.reverse();\n            }\n\n            result.history.reverse();\n            dispatch(setHistory(result));\n            dispatch(setLoading(false));\n\n          case 10:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/thqv/Desktop/Bachelor/xqc-app/src/redux/reducers.tsx"],"names":["ADD_DEVICE","SET_DEVICES","CLEAR_DEVICES","SET_SELECTED_DEVICE","SET_LOADING","SET_HISTORY","addDevice","setDevices","clearDevices","setSelectedDevice","setLoading","setHistory","URL","setDevicesInAsyncStorage","getDevicesInAsyncStorage","clearStorage","filterEquals","deviceExists","initialDevice","Imei","Name","Status","undefined","initialState","devices","selectedDevice","isConnectingDevice","loading","deviceHistory","devicesReducer","state","action","type","payload","clearDevicesAsync","dispatch","getState","updateDeviceInStorage","device","devicesFromStorage","tempArray","JSON","parse","i","length","fetchDevices","Alert","alert","devicesJson","fetchedDevices","fetch","then","res","json","formatted","push","setSelectedDeviceAsync","updateSelectedDevice","deviceFromState","catch","err","console","log","formattedDevice","addDeviceAsync","name","imei","formattedDevices","concat","deleteDeviceAsync","filteredDevices","filter","getDevicesFromStorage","clearStorageAsync","fetchHistory","body","stringify","start","method","headers","result","history","events","reverse"],"mappings":"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","sourcesContent":["import {\n  ADD_DEVICE,\n  SET_DEVICES,\n  CLEAR_DEVICES,\n  SET_SELECTED_DEVICE,\n  SET_LOADING,\n  SET_HISTORY,\n} from \"./action-types\";\nimport {\n  addDevice,\n  setDevices,\n  clearDevices,\n  setSelectedDevice,\n  setLoading,\n  setHistory,\n} from \"./actions\";\nimport { URL } from \"../utils/constants\";\nimport { Device, StateProps, History } from \"../utils/types\";\nimport moment from \"moment\";\nimport {\n  setDevicesInAsyncStorage,\n  getDevicesInAsyncStorage,\n  clearStorage,\n} from \"../utils/storage\";\nimport { filterEquals, deviceExists } from \"../utils/helpers\";\nimport { Alert } from \"react-native\";\n\nconst initialDevice: Device = {\n  Imei: \"\",\n  Name: \"\",\n  Status: undefined,\n};\n\nconst initialState: StateProps = {\n  devices: [],\n  selectedDevice: initialDevice,\n  isConnectingDevice: false,\n  loading: false,\n  deviceHistory: undefined,\n};\n\nexport const devicesReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case ADD_DEVICE: {\n      return { ...state, devices: [...state.devices, action.payload] };\n    }\n    case SET_DEVICES: {\n      return { ...state, devices: action.payload };\n    }\n    case CLEAR_DEVICES: {\n      return { ...state, devices: action.payload };\n    }\n    case SET_SELECTED_DEVICE: {\n      return { ...state, selectedDevice: action.payload };\n    }\n    case SET_LOADING: {\n      return { ...state, loading: action.payload };\n    }\n    case SET_HISTORY: {\n      return { ...state, deviceHistory: action.payload };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const clearDevicesAsync = () => async (dispatch: any, getState: any) => {\n  dispatch(clearDevices());\n};\n\nexport const updateDeviceInStorage = (device: Device) => async (\n  dispatch: any,\n  getState: any\n) => {\n  dispatch(setLoading(true));\n\n  const devicesFromStorage = await getDevicesInAsyncStorage();\n\n  if (!devicesFromStorage) {\n    return;\n  }\n\n  var tempArray: Device[] = JSON.parse(devicesFromStorage);\n\n  for (let i = 0; i < tempArray.length; i++) {\n    if (tempArray[i].Imei == device.Imei) {\n      tempArray[i].Name = device.Name;\n    }\n  }\n\n  setDevicesInAsyncStorage(tempArray);\n  dispatch(setLoading(false));\n};\n\nexport const fetchDevices = () => async (dispatch: any, getState: any) => {\n  dispatch(setLoading(true));\n  const devicesFromStorage = await getDevicesInAsyncStorage();\n  if (devicesFromStorage === null) {\n    Alert.alert(\"No storage\");\n    return;\n  }\n\n  const devicesJson = JSON.parse(devicesFromStorage!);\n\n  let fetchedDevices: Device[] = [];\n\n  for (let i = 0; i < devicesJson.length; i++) {\n    const device = await fetch(`${URL}${devicesJson[i].Imei}`).then((res) =>\n      res.json()\n    );\n\n    const formatted: Device = {\n      Name: devicesJson[i].Name,\n      Imei: devicesJson[i].Imei,\n      Status: device,\n    };\n\n    fetchedDevices.push(formatted);\n  }\n  dispatch(setLoading(false));\n  dispatch(setDevices(fetchedDevices));\n};\n\nexport const setSelectedDeviceAsync = (device: Device) => async (\n  dispatch: any,\n  getState: any\n) => {\n  dispatch(setSelectedDevice(device));\n};\n\nexport const updateSelectedDevice = () => async (\n  dispatch: any,\n  getState: any\n) => {\n  if (getState().selectedDevice.Imei === undefined) {\n    Alert.alert(\"Error\", \"No selected device!\");\n  }\n\n  const deviceFromState = getState().selectedDevice;\n\n  const device = await fetch(`${URL}${deviceFromState.Imei}`)\n    .then((res) => res.json())\n    .catch((err) => {\n      console.log(\"ERROR: \" + err);\n    });\n  const formattedDevice: Device = {\n    Imei: deviceFromState.Imei,\n    Name: deviceFromState.Name,\n    Status: device,\n  };\n  console.log(formattedDevice);\n  dispatch(setSelectedDevice(formattedDevice));\n};\n\nexport const addDeviceAsync = (name: string, imei: string) => async (\n  dispatch: any,\n  getState: any\n) => {\n  const devicesFromStorage = await getDevicesInAsyncStorage();\n\n  const device: Device = {\n    Name: name,\n    Imei: imei,\n    Status: undefined,\n  };\n\n  if (!devicesFromStorage) {\n    setDevicesInAsyncStorage([device]);\n  } else {\n    if (deviceExists(JSON.parse(devicesFromStorage), device.Imei)) {\n      Alert.alert(\"ERROR\", \"Already has a device with that code!\");\n      return;\n    } else {\n      const formattedDevices = JSON.parse(devicesFromStorage);\n      await setDevicesInAsyncStorage(formattedDevices.concat([device]));\n    }\n  }\n\n  dispatch(addDevice(device));\n};\n\nexport const deleteDeviceAsync = (imei: string) => async (\n  dispatch: any,\n  getState: any\n) => {\n  dispatch(setLoading(true));\n  const devicesFromStorage = await getDevicesInAsyncStorage();\n\n  var filteredDevices: Device[] = JSON.parse(\n    devicesFromStorage!\n  ).filter((device: Device) => filterEquals(device, imei));\n\n  setDevicesInAsyncStorage(filteredDevices);\n  dispatch(setDevices(filteredDevices));\n  dispatch(setLoading(true));\n};\n\n//TEST\nexport const getDevicesFromStorage = () => async (\n  dispatch: any,\n  getState: any\n) => {\n  const devicesFromStorage = await getDevicesInAsyncStorage();\n  console.log(devicesFromStorage);\n};\n\n//TEST\nexport const clearStorageAsync = () => async (dispatch: any, getState: any) => {\n  clearStorage();\n};\n\nexport const fetchHistory = () => async (dispatch: any, getState: any) => {\n  dispatch(setLoading(true));\n\n  const device: Device = getState().selectedDevice;\n\n  const body = JSON.stringify({ start: \"2021-01-30T18:11:01.674Z\" });\n\n  const result: History = await fetch(`${URL}history/${device.Imei}`, {\n    method: \"POST\",\n    body: body,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  }).then((res) => res.json());\n\n  for (let i = 0; i < result.history.length; i++) {\n    result.history[i].events.reverse();\n  }\n  result.history.reverse();\n\n  dispatch(setHistory(result));\n  dispatch(setLoading(false));\n};\n"]},"metadata":{},"sourceType":"module"}